// 定义 API的参数类型，基本数据类型的参数无需定义，复杂类型参数建议使用自定义type
/**
 * myApi 异步函数的参数，在type里定义函数需要的参数以及api成功、失败的相关回调函数。
 */
export type MyApiOptions = {
    paramA: boolean;
    success?: (res: MyApiResult) => void;
    fail?: (res: MyApiFail) => void;
    complete?: (res: any) => void;
};
// 定义 API 的返回值类型, 基本数据类型的返回值无需特殊定义，复杂类型的参数建议使用自定义type
/**
 * 函数返回结果
 * 可以是void, 基本数据类型，自定义type, 或者其他类型。
 * [可选实现]
 */
export type MyApiResult = {
    fieldA: number;
    fieldB: boolean;
    fieldC: string;
};
// 定义 API 对外暴露的错误码，为了更好语法提示和校验效果，建议将错误码用type 定义成联合类型。定义后，使用未指定的错误码将会被警告提示。
// 建议定义的错误码遵循uni错误规范 [详见](https://uniapp.dcloud.net.cn/tutorial/err-spec.html#unierror)。
/**
 * 错误码
 * 根据uni错误码规范要求，建议错误码以90开头，以下是错误码示例：
 * - 9010001 错误信息1
 * - 9010002 错误信息2
 */
export type MyApiErrorCode = 9010001 | 9010002;
// 定义 API 的错误回调参数类型，这里定义成 interface 并继承 IUniError 是为了遵循统一的 Uni错误码规范。
// 这里开发者只需要指定 errCode 的类型，以便获得更好的语法提和校验效果。
/**
 * myApi 的错误回调参数
 */
export interface MyApiFail extends IUniError {
    errCode: MyApiErrorCode;
}
;
// 定义对外暴露的 API 类型，这里是个异步函数
/* 异步函数定义 */
export type MyApi = (options: MyApiOptions) => void;
// 定义对外暴露的 API 类型，这里是个同步函数
/* 同步函数定义 */
export type MyApiSync = (paramA: boolean) => MyApiResult;
//# sourceMappingURL=interface.uts.map