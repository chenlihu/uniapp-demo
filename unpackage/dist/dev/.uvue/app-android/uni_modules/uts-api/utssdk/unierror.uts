// 首先导入在 interface.uts 文件中定义的错误码类型，和错误的类型
import { MyApiErrorCode, MyApiFail } from "./interface.uts";
/**
 * 定义错误主题，错误主题是Uni错误码的一个标准字段。
 * 注意：错误主题一般为插件名称，每个组件不同，需要使用时请更改。
 * [可选实现]
 */
export const UniErrorSubject = 'uts-api';
/**
 * 错误信息，定义和错误码对应的语义化的提示信息，为了更好的获取，建议定义成Map类型。
 * @UniError
 * [可选实现]
 */
export const UTSApiUniErrors: Map<MyApiErrorCode, string> = new Map([
    /**
     * 错误码及对应的错误信息
     */
    [9010001, 'custom error mseeage1'],
    [9010002, 'custom error mseeage2'],
]);
/**
 * 错误对象的具体使用实现，该实现会在 index.uts代码中创建使用。
 * 使用时只需要传入特定的错误码即可完成创建。
 */
export class MyApiFailImpl extends UniError implements MyApiFail {
    override errCode: MyApiErrorCode;
    /**
     * 错误对象构造函数
     */
    constructor(errCode: MyApiErrorCode) {
        super();
        this.errSubject = UniErrorSubject;
        this.errCode = errCode;
        this.errMsg = UTSApiUniErrors.get(errCode) ?? "";
    }
}
//# sourceMappingURL=unierror.uts.map