{"version":3,"file":"index.uts","sourceRoot":"","sources":["uni_modules/uts-api/utssdk/app-ios/index.uts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,+BAA+B;AAC/B,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE/E,8BAA8B;AAC9B,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAE5C;;;;;;;;;;GAUG;AAEH;;GAEG;AAEH;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,MAAM,KAAK,EAAG,KAAK,GAAG,UAAU,OAAO,EAAG,YAAY;IAE3D,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;QAC1B,OAAO;QACP,MAAM,GAAG,EAAG,WAAW,GAAG;YACxB,MAAM,EAAE,EAAE;YACV,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,cAAc;SACvB,CAAC;QACF,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;QACvB,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC;KAEzB;SAAM;QACL,OAAO;QACP,IAAI,UAAU,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5C,OAAO,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,CAAA;QAC1B,OAAO,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAA;KAC/B;AAEH,CAAC,CAAA;AAED;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,SAAS,EAAG,SAAS,GAAG,UAAU,MAAM,EAAG,OAAO,GAAI,WAAW;IAC5E,sBAAsB;IACtB,MAAM,GAAG,EAAG,WAAW,GAAG;QACxB,MAAM,EAAE,EAAE;QACV,MAAM,EAAE,MAAM;QACd,MAAM,EAAE,cAAc;KACvB,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC,CAAA;AAED;;GAEG","sourcesContent":["/**\n * 引用 iOS 系统库，示例如下：\n * import { UIDevice } from \"UIKit\";\n * [可选实现，按需引入]\n */\n\n/* 引入 interface.uts 文件中定义的变量 */\nimport { MyApiOptions, MyApiResult, MyApi, MyApiSync } from '../interface.uts';\n\n/* 引入 unierror.uts 文件中定义的变量 */\nimport { MyApiFailImpl } from '../unierror';\n\n/**\n * 引入三方库\n * [可选实现，按需引入]\n *\n * 在 iOS 平台引入三方库有以下两种方式：\n * 1、通过引入三方库framework 或者.a 等方式，需要将 .framework 放到 ./Frameworks 目录下，将.a 放到 ./Libs 目录下。更多信息[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#ios-平台原生配置)\n * 2、通过 cocoaPods 方式引入，将要引入的 pod 信息配置到 config.json 文件下的 dependencies-pods 字段下。详细配置方式[详见](https://uniapp.dcloud.net.cn/plugin/uts-ios-cocoapods.html)\n *\n * 在通过上述任意方式依赖三方库后，使用时需要在文件中 import:\n * 示例：import { LottieLoopMode\t} from 'Lottie'\n */\n\n/**\n * UTSiOS 为平台内置对象，不需要 import 可直接调用其API，[详见](https://uniapp.dcloud.net.cn/uts/utsios.html)\n */\n\n/**\n * 异步方法\n *\n * uni-app项目中（vue/nvue）调用示例：\n * 1、引入方法声明 import { myApi } from \"@/uni_modules/uts-api\"\n * 2、方法调用\n * myApi({\n *   paramA: false,\n *   complete: (res) => {\n *      __f__('log','at uni_modules/uts-api/utssdk/app-ios/index.uts:38',res)\n *   }\n * });\n *\n */\nexport const myApi : MyApi = function (options : MyApiOptions) {\n\n  if (options.paramA == true) {\n    // 返回数据\n    const res : MyApiResult = {\n      fieldA: 85,\n      fieldB: true,\n      fieldC: 'some message'\n    };\n    options.success?.(res);\n    options.complete?.(res);\n\n  } else {\n    // 返回错误\n    let failResult = new MyApiFailImpl(9010001);\n    options.fail?.(failResult)\n    options.complete?.(failResult)\n  }\n\n}\n\n/**\n * 同步方法\n *\n * uni-app项目中（vue/nvue）调用示例：\n * 1、引入方法声明 import { myApiSync } from \"@/uni_modules/uts-api\"\n * 2、方法调用\n * myApiSync(true);\n *\n */\nexport const myApiSync : MyApiSync = function (paramA : boolean) : MyApiResult {\n  // 返回数据，根据插件功能获取实际的返回值\n  const res : MyApiResult = {\n    fieldA: 85,\n    fieldB: paramA,\n    fieldC: 'some message'\n  };\n  return res;\n}\n\n/**\n * 更多插件开发的信息详见：https://uniapp.dcloud.net.cn/plugin/uts-plugin.html\n */\n"]}