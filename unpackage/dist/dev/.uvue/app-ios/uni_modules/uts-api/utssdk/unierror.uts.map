{"version":3,"file":"unierror.uts","sourceRoot":"","sources":["uni_modules/uts-api/utssdk/unierror.uts"],"names":[],"mappings":"AAAA,yCAAyC;AACzC,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAE3D;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,SAAS,CAAC;AAGzC;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,EAAG,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC;IACnE;;OAEG;IACH,CAAC,OAAO,EAAE,uBAAuB,CAAC;IAClC,CAAC,OAAO,EAAE,uBAAuB,CAAC;CACnC,CAAC,CAAC;AAGH;;;GAGG;AACH,MAAM,OAAO,aAAc,SAAQ,QAAS,YAAW,SAAS;IAC9D,QAAQ,CAAC,OAAO,EAAE,cAAc,CAAA;IAChC;;OAEG;IACH,YAAY,OAAO,EAAG,cAAc;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACnD,CAAC;CACF","sourcesContent":["// 首先导入在 interface.uts 文件中定义的错误码类型，和错误的类型\nimport { MyApiErrorCode, MyApiFail } from \"./interface.uts\"\n\n/**\n * 定义错误主题，错误主题是Uni错误码的一个标准字段。\n * 注意：错误主题一般为插件名称，每个组件不同，需要使用时请更改。\n * [可选实现]\n */\nexport const UniErrorSubject = 'uts-api';\n\n\n/**\n * 错误信息，定义和错误码对应的语义化的提示信息，为了更好的获取，建议定义成Map类型。\n * @UniError\n * [可选实现]\n */\nexport const UTSApiUniErrors : Map<MyApiErrorCode, string> = new Map([\n  /**\n   * 错误码及对应的错误信息\n   */\n  [9010001, 'custom error mseeage1'],\n  [9010002, 'custom error mseeage2'],\n]);\n\n\n/**\n * 错误对象的具体使用实现，该实现会在 index.uts代码中创建使用。\n * 使用时只需要传入特定的错误码即可完成创建。\n */\nexport class MyApiFailImpl extends UniError implements MyApiFail {\n  override errCode: MyApiErrorCode\n  /**\n   * 错误对象构造函数\n   */\n  constructor(errCode : MyApiErrorCode) {\n    super();\n    this.errSubject = UniErrorSubject;\n    this.errCode = errCode;\n    this.errMsg = UTSApiUniErrors.get(errCode) ?? \"\";\n  }\n}\n\n"]}