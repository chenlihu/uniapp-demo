{"version":3,"sources":["uni_modules/tusen-t-view/utssdk/app-ios/index.vue"],"sourcesContent":["\n\n\n\n\n  /**\n   * 引用 iOS 系统库\n   * [可选实现，按需引入]\n   */\n  import {\n    UIButton,\n    UIControl\n  } from \"UIKit\"\n\n  /**\n   * 引入三方库\n   * [可选实现，按需引入]\n   *\n   * 在 iOS 平台引入三方库有以下两种方式：\n   * 1、通过引入三方库framework 或者.a 等方式，需要将 .framework 放到 ./Frameworks 目录下，将.a 放到 ./Libs 目录下。更多信息[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#ios-平台原生配置)\n   * 2、通过 cocoaPods 方式引入，将要引入的 pod 信息配置到 config.json 文件下的 dependencies-pods 字段下。详细配置方式[详见](https://uniapp.dcloud.net.cn/plugin/uts-ios-cocoapods.html)\n   *\n   * 在通过上述任意方式依赖三方库后，使用时需要在文件中 import:\n   * 示例：import { LottieAnimationView, LottieAnimation, LottieLoopMode\t} from 'Lottie'\n   */\n\n  /**\n   * UTSiOS、UTSComponent 为平台内置对象，不需要 import 可直接调用其API，[详见](https://uniapp.dcloud.net.cn/uts/utsios.html)\n   */\n  import { UTSComponent } from \"DCloudUTSFoundation\"\n  \n  //原生提供以下属性或方法的实现\n  export default {\n    data() {\n      return {\n      };\n    },\n    /**\n     * 组件名称，也就是开发者使用的标签\n     */\n    name: \"tusen-t-view\",\n    /**\n     * 组件涉及的事件声明，只有声明过的事件，才能被正常发送\n     */\n    emits: [],\n    /**\n     * 属性声明，组件的使用者会传递这些属性值到组件\n     */\n    props: {\n    },\n    /**\n     * 组件内部变量声明\n     */\n\n    /**\n     * 属性变化监听器实现\n     */\n    watch: {\n    },\n    /**\n     * 规则：如果没有配置expose，则methods中的方法均对外暴露，如果配置了expose，则以expose的配置为准向外暴露\n     * ['publicMethod'] 含义为：只有 `publicMethod` 在实例上可用\n     */\n    expose: [],\n    methods: {\n    },\n\n\n    /**\n     * 组件被创建，组件第一个生命周期，\n     * 在内存中被占用的时候被调用，开发者可以在这里执行一些需要提前执行的初始化逻辑\n     * [可选实现]\n     */\n    created() {\n\n    },\n    /**\n     * 对应平台的view载体即将被创建，对应前端beforeMount\n     * [可选实现]\n     */\n    NVBeforeLoad() {\n\n    },\n    /**\n     * 创建原生View，必须定义返回值类型\n     * 开发者需要重点实现这个函数，声明原生组件被创建出来的过程，以及最终生成的原生组件类型\n     * [必须实现]\n     */\n    NVLoad() : Tusen3DView {\n      //必须实现\n\n      // 创建3D视图并添加到按钮下方\n      let tusen3dView = new Tusen3DView()\n      // 可根据需要设置frame或保持自适应\n      return tusen3dView\n    },\n\n    /**\n     * 原生View已创建\n     * [可选实现]\n     */\n    NVLoaded() {\n    },\n    /**\n     * 原生View布局完成\n     * [可选实现]\n     */\n    NVLayouted() {\n\n    },\n    /**\n     * 原生View将释放\n     * [可选实现]\n     */\n    NVBeforeUnload() { },\n    /**\n     * 原生View已释放，这里可以做释放View之后的操作\n     * [可选实现]\n     */\n    NVUnloaded() {\n\n    },\n    /**\n     * 组件销毁\n     * [可选实现]\n     */\n    unmounted() { }\n\n    /**\n     * 更多组件开发的信息详见：https://uniapp.dcloud.net.cn/plugin/uts-component.html\n     */\n  }\n\n\n\n\n\n\n"],"names":[],"mappings":"AA6BE,0BAAkD;AApBlD,YAGc;;;gDA4ED;mCAfD,CAEV;wCAKe,CAEf;qCAMW,YAAY;QAIrB,IAAI,cAAc,AAAI;QAEtB,OAAO;IACT;oCAMW,CACX;sCAKa,CAEb;0CAKiB,CAAE;sCAKN,CAEb;qCAKY,CAAE"}