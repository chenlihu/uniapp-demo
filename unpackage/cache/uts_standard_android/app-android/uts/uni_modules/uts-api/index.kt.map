{"version":3,"sources":["uni_modules/uts-api/utssdk/interface.uts","uni_modules/uts-api/utssdk/unierror.uts","uni_modules/uts-api/utssdk/app-android/index.uts"],"sourcesContent":["// 定义 API的参数类型，基本数据类型的参数无需定义，复杂类型参数建议使用自定义type\n/**\n * myApi 异步函数的参数，在type里定义函数需要的参数以及api成功、失败的相关回调函数。\n */\nexport type MyApiOptions = {\n  paramA : boolean\n  success ?: (res : MyApiResult) => void\n  fail ?: (res : MyApiFail) => void\n  complete ?: (res : any) => void\n}\n\n// 定义 API 的返回值类型, 基本数据类型的返回值无需特殊定义，复杂类型的参数建议使用自定义type\n/**\n * 函数返回结果\n * 可以是void, 基本数据类型，自定义type, 或者其他类型。\n * [可选实现]\n */\nexport type MyApiResult = {\n  fieldA : number,\n  fieldB : boolean,\n  fieldC : string\n}\n\n// 定义 API 对外暴露的错误码，为了更好语法提示和校验效果，建议将错误码用type 定义成联合类型。定义后，使用未指定的错误码将会被警告提示。\n// 建议定义的错误码遵循uni错误规范 [详见](https://uniapp.dcloud.net.cn/tutorial/err-spec.html#unierror)。\n/**\n * 错误码\n * 根据uni错误码规范要求，建议错误码以90开头，以下是错误码示例：\n * - 9010001 错误信息1\n * - 9010002 错误信息2\n */\nexport type MyApiErrorCode = 9010001 | 9010002;\n\n\n// 定义 API 的错误回调参数类型，这里定义成 interface 并继承 IUniError 是为了遵循统一的 Uni错误码规范。\n// 这里开发者只需要指定 errCode 的类型，以便获得更好的语法提和校验效果。\n/**\n * myApi 的错误回调参数\n */\nexport interface MyApiFail extends IUniError {\n  errCode : MyApiErrorCode\n};\n\n// 定义对外暴露的 API 类型，这里是个异步函数\n/* 异步函数定义 */\nexport type MyApi = (options : MyApiOptions) => void\n\n\n// 定义对外暴露的 API 类型，这里是个同步函数\n/* 同步函数定义 */\nexport type MyApiSync = (paramA : boolean) => MyApiResult\n\n","// 首先导入在 interface.uts 文件中定义的错误码类型，和错误的类型\nimport { MyApiErrorCode, MyApiFail } from \"./interface.uts\"\n\n/**\n * 定义错误主题，错误主题是Uni错误码的一个标准字段。\n * 注意：错误主题一般为插件名称，每个组件不同，需要使用时请更改。\n * [可选实现]\n */\nexport const UniErrorSubject = 'uts-api';\n\n\n/**\n * 错误信息，定义和错误码对应的语义化的提示信息，为了更好的获取，建议定义成Map类型。\n * @UniError\n * [可选实现]\n */\nexport const UTSApiUniErrors : Map<MyApiErrorCode, string> = new Map([\n  /**\n   * 错误码及对应的错误信息\n   */\n  [9010001, 'custom error mseeage1'],\n  [9010002, 'custom error mseeage2'],\n]);\n\n\n/**\n * 错误对象的具体使用实现，该实现会在 index.uts代码中创建使用。\n * 使用时只需要传入特定的错误码即可完成创建。\n */\nexport class MyApiFailImpl extends UniError implements MyApiFail {\n  override errCode: MyApiErrorCode\n  /**\n   * 错误对象构造函数\n   */\n  constructor(errCode : MyApiErrorCode) {\n    super();\n    this.errSubject = UniErrorSubject;\n    this.errCode = errCode;\n    this.errMsg = UTSApiUniErrors.get(errCode) ?? \"\";\n  }\n}\n\n","\n/**\n * 引用 Android 系统库，示例如下：\n * import { Context } from \"android.content.Context\";\n * [可选实现，按需引入]\n */\n\n/* 引入 interface.uts 文件中定义的变量 */\nimport { MyApiOptions, MyApiResult, MyApi, MyApiSync } from '../interface.uts';\n\n/* 引入 unierror.uts 文件中定义的变量 */\nimport { MyApiFailImpl } from '../unierror';\n\n/**\n * 引入三方库\n * [可选实现，按需引入]\n *\n * 在 Android 平台引入三方库有以下两种方式：\n * 1、[推荐] 通过 仓储 方式引入，将 三方库的依赖信息 配置到 config.json 文件下的 dependencies 字段下。详细配置方式[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#dependencies)\n * 2、直接引入，将 三方库的aar或jar文件 放到libs目录下。更多信息[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#android%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%94%9F%E9%85%8D%E7%BD%AE)\n *\n * 在通过上述任意方式依赖三方库后，使用时需要在文件中 import，如下示例：\n * import { LottieAnimationView } from 'com.airbnb.lottie'\n */\n\n/**\n * UTSAndroid 为平台内置对象，不需要 import 可直接调用其API，[详见](https://uniapp.dcloud.net.cn/uts/utsandroid.html#utsandroid)\n */\n\n\n/**\n * 异步方法\n *\n * uni-app项目中（vue/nvue）调用示例：\n * 1、引入方法声明 import { myApi } from \"@/uni_modules/uts-api\"\n * 2、方法调用\n * myApi({\n *   paramA: false,\n *   complete: (res) => {\n *      __f__('log','at uni_modules/uts-api/utssdk/app-android/index.uts:40',res)\n *   }\n * });\n * uni-app x项目（uvue）中调用示例：\n * 1、引入方法及参数声明 import { myApi, MyApiOptions } from \"@/uni_modules/uts-api\";\n * 2、方法调用\n * let options = {\n *   paramA: false,\n *   complete: (res : any) => {\n *     __f__('log','at uni_modules/uts-api/utssdk/app-android/index.uts:49',res)\n *   }\n * } as MyApiOptions;\n * myApi(options);\n *\n */\nexport const myApi : MyApi = function (options : MyApiOptions) {\n  if (options.paramA == true) {\n    // 返回数据\n    const res : MyApiResult = {\n      fieldA: 85,\n      fieldB: true,\n      fieldC: 'some message'\n    };\n    options.success?.(res);\n    options.complete?.(res);\n  } else {\n    // 返回错误\n    const err = new MyApiFailImpl(9010001);\n    options.fail?.(err)\n    options.complete?.(err)\n  }\n}\n\n/**\n * 同步方法\n *\n * uni-app项目中（vue/nvue）调用示例：\n * 1、引入方法声明 import { myApiSync } from \"@/uni_modules/uts-api\"\n * 2、方法调用 myApiSync(true)\n *\n * uni-app x项目（uvue）中调用示例：\n * 1、引入方法及参数声明 import { myApiSync } from \"@/uni_modules/uts-api\";\n * 2、方法调用 myApiSync(true)\n */\nexport const myApiSync : MyApiSync = function (paramA : boolean) : MyApiResult {\n  // 返回数据，根据插件功能获取实际的返回值\n  const res : MyApiResult = {\n    fieldA: 85,\n    fieldB: paramA,\n    fieldC: 'some message'\n  };\n  return res;\n}\n\n\n"],"names":[],"mappings":";;;;;;;;;;;;;AAI2B,WAAf;IACV;qBAAS,OAAO,SAAA;IAChB,oBAAY,KAAM,gBAAgB,IAAI,UAAA;IACtC,iBAAS,KAAM,cAAc,IAAI,UAAA;IACjC,qBAAa,KAAM,GAAG,KAAK,IAAI,UAAA;;;;;;AASP,WAAd;IACV;qBAAS,MAAM,CAAC;IAChB;qBAAS,OAAO,SAAC;IACjB;qBAAS,MAAM,CAAA;;;;;;UAWL,iBAAiB,MAAO;UAQnB,YAAkB;iBACjC,SAAU;;UAKA,SAAS,SAAU,iBAAiB,IAAI;UAKxC,aAAa,QAAS,OAAO,KAAK;AC1CvC,IAAM,kBAAkB;AAQxB,IAAM,iBAAkB,oBAAoB,MAAM,IAAI,AAAI,IAAI;IAInE;AAAC,eAAO;QAAE;KAAwB;IAClC;AAAC,eAAO;QAAE;KAAwB;CACnC;AAOK,WAAO,gBAAsB;;;;IACjC,aAAS,uBAAuB;IAIhC,YAAY,uBAAwB,IAClC,KAAK,GAD6B;QAElC,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,MAAM,GAAG,gBAAgB,GAAG,CAAC,YAAY;IAChD;;ACeK,IAAM,eAAgB,IAAU,qBAAsB,EAAA;IAC3D,IAAI,QAAQ,MAAM,IAAI,IAAI,EAAE;QAE1B,IAAM,kBACJ,SAAQ,EAAE,EACV,SAAQ,IAAI,EACZ,SAAQ;QAEV,QAAQ,OAAO,SAAG;QAClB,QAAQ,QAAQ,SAAG;WACd;QAEL,IAAM,MAAM,cAAkB,OAAO;QACrC,QAAQ,IAAI,SAAG;QACf,QAAQ,QAAQ,SAAG;;AAEvB;AAaO,IAAM,uBAAwB,IAAU,QAAS,OAAO,eAAe;IAE5E,IAAM,kBACJ,SAAQ,EAAE,EACV,SAAQ,QACR,SAAQ;IAEV,OAAO;AACT;AFvF2B;IACzB,SAAA,QAAS,OAAO,QAAA;IAChB,SAAA,SAAS,mBAA6B;IACtC,SAAA,MAAM,mBAA2B;IACjC,SAAA,UAAU,mBAAqB;;cAqCZ,SAAU,yBAAiB,IAAI;qEAvCtC,KAAM,cAAgB,IAAI;gCAA1B;;iBACH,KAAM,YAAc,IAAI;6BAAxB;;qBACI,KAAM,GAAG,GAAK,IAAI;iCAAlB;;;;kBA0CU,QAAS,OAAO,GAAK;qBAArB"}